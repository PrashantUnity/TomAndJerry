@page "/playmedia/{videId}"
@inject NavigationManager nav
<MudPaper Class="d-flex flex-wrap justify-center " Style="background-color:transparent" Elevation="0" Width="100%">
    <MudGrid>
        <MudItem xs="12" lg="9" Style="overflow:scroll; height:100vh;">
            <div class="video-container">
                <iframe width="560"
                        height="315"
                        src="@Datas.GetVideo(VideId).VideoUrl"
                        frameborder="0"
                        allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
                        allowfullscreen>
                </iframe>
            </div>
            <MudList Style="background-color:lightgrey">
                <MudListItem>
                    <MudText>
                        @Datas.GetVideo(VideId).Description
                    </MudText>
                </MudListItem>
                <MudListItem>
                    <MudExpansionPanel Text="Comments">
                        <Giscus Term="@Datas.GetVideo(VideId).CommentName" />
                    </MudExpansionPanel>
                </MudListItem>
            </MudList>
        </MudItem>
        <MudItem xs="12" lg="3" Style="overflow:scroll; height:100vh;">
            <MudPaper Class="d-flex flex-wrap justify-center "
                      Style="background-color:transparent"
                      Elevation="0"
                      Width="100%">
                @foreach (var item in Datas.GetRandomVideo())
                {
                    <MudPaper @onclick="()=>GoTOPage(item)" Style="background-color:transparent" Elevation="0">
                        <Thumbnail VideoModel="@item" />
                    </MudPaper>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudPaper>

@code
{
    [Parameter] public string VideId { get; set; }
    [Inject] public Data Datas { get; set; }
    public void GoTOPage(Video video)
    {
        nav.NavigateTo($"playmedia/{video.CommentName}");
    }
    protected override async Task OnInitializedAsync()
    {
        Datas.OnChange += StateHasChanged;
        await Datas.InitializeAsync();
    }

    public void Dispose()
    {
        Datas.OnChange -= StateHasChanged;
    }
}
<style>
    .video-container {
        position: relative;
        padding-bottom: 56.25%; /* 16:9 */
        height: 0;
    }

        .video-container iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

    body {
        overflow-x: hidden;
        overflow-y: auto;
        -ms-overflow-style: none;
        scrollbar-width: none; /* Firefox */
    }

        body::-webkit-scrollbar {
            display: none;
        }
</style>